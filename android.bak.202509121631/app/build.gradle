apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

/**
 * React/Expo configuration block (unchanged)
 *

/**
 * Release / Proguard toggle
 */
def enableProguardInReleaseBuilds = (findProperty('android.enableProguardInReleaseBuilds') ?: false).toBoolean()

/**
 * Default JSC flavor if Hermes disabled
 */
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

/**
 * Try to read kotlin version from rootProject ext.versions.kotlin, fallback to a safe 1.9.22.
 */

/**
 * Android module configuration
 */
android {
    namespace "com.otpsim.myapp"

    defaultConfig {
        applicationId "com.otpsim.myapp"
        minSdkVersion: 24
        targetSdkVersion: 35
        versionCode 3
        versionName "1.0.2"
        missingDimensionStrategy 'store', 'play'
    }

    // NDK pinned as you had it
    ndkVersion "27.1.12297006"

    signingConfigs {
        release {
            if (project.hasProperty("MYAPP_UPLOAD_STORE_FILE")) {
                storeFile file(MYAPP_UPLOAD_STORE_FILE)
                storePassword MYAPP_UPLOAD_STORE_PASSWORD
                keyAlias MYAPP_UPLOAD_KEY_ALIAS
                keyPassword MYAPP_UPLOAD_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            shrinkResources (findProperty('android.enableShrinkResourcesInReleaseBuilds')?.toBoolean() ?: false)
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            crunchPngs (findProperty('android.enablePngCrunchInReleaseBuilds')?.toBoolean() ?: true)
        }
    }

    // Ensure Java/Kotlin compatibility across modules
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    // Packaging options - leave as-is but structured
    packagingOptions {
        jniLibs {
            useLegacyPackaging (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false)
        }
    }

    androidResources {
        ignoreAssetsPattern "!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~"
    }
}

/**
 * Force Kotlin jvm target for all Kotlin compile tasks in this module to avoid mixed-target problems.
 */
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = "11"
    }
}

/**
 * Dependencies
 */
dependencies {

    // Kotlin stdlib explicit to avoid transitive mismatches
    implementation("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}")

    def frescoVersion = "3.1.3" // fallback

    def isGifEnabled = (findProperty("expo.gif.enabled") ?: "") == "true"
    def isWebpEnabled = (findProperty("expo.webp.enabled") ?: "") == "true"
    def isWebpAnimatedEnabled = (findProperty("expo.webp.animated") ?: "") == "true"

    if (isGifEnabled) {
        implementation("com.facebook.fresco:animated-gif:$frescoVersion")
    }
    if (isWebpEnabled) {
        implementation("com.facebook.fresco:webpsupport:$frescoVersion")
        if (isWebpAnimatedEnabled) {
            implementation("com.facebook.fresco:animated-webp:$frescoVersion")
        }
    }

    // Hermes or JSC selection â€” ensure hermesEnabled property is set via gradle.properties if you use Hermes
    def hermesEnabled = (findProperty('expo.jsEngine') ?: findProperty('hermesEnabled') ?: "false").toString()
    if (hermesEnabled.toLowerCase() in ["1", "true", "yes"]) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}
