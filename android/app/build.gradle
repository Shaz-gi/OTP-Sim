apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
// NOTE: we don't apply "com.facebook.react" here; using react.gradle fallback elsewhere if needed

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

/**
 * Release / Proguard toggle
 */
def enableProguardInReleaseBuilds = (findProperty('android.enableProguardInReleaseBuilds') ?: false).toBoolean()

/**
 * Default JSC flavor if Hermes disabled
 */
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

/**
 * Try to obtain expoLibs.fresco version, fallback if not available
 */
def frescoVersionFallback = "2.6.0" // fallback if expoLibs is not available
def frescoVersion = frescoVersionFallback
try {
    if (this.hasProperty("expoLibs") && expoLibs?.versions?.fresco != null) {
        frescoVersion = expoLibs.versions.fresco.get()
        println "Using fresco version from expoLibs: $frescoVersion"
    } else {
        println "expoLibs not found, using fallback fresco version: $frescoVersion"
    }
} catch (Exception e) {
    println "expoLibs lookup failed: ${e.message}. Using fallback fresco version: $frescoVersion"
}

android {
    compileSdkVersion 34
    namespace "com.otpsim.myapp"

    defaultConfig {
        applicationId "com.otpsim.myapp"
        minSdkVersion 24
        targetSdkVersion 34
        versionCode 5
        versionName "1.0.4"

        // default choice when dependency exposes 'store' productFlavors
        missingDimensionStrategy 'store', 'play'
    }

    // NDK pinned
    ndkVersion "27.1.12297006"

    signingConfigs {
        release {
            if (project.hasProperty("MYAPP_UPLOAD_STORE_FILE")) {
                storeFile file(MYAPP_UPLOAD_STORE_FILE)
                storePassword MYAPP_UPLOAD_STORE_PASSWORD
                keyAlias MYAPP_UPLOAD_KEY_ALIAS
                keyPassword MYAPP_UPLOAD_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            shrinkResources (findProperty('android.enableShrinkResourcesInReleaseBuilds')?.toBoolean() ?: false)
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            crunchPngs (findProperty('android.enablePngCrunchInReleaseBuilds')?.toBoolean() ?: true)
        }
        debug {
            // debug-specific options (if needed)
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false)
        }
    }

    androidResources {
        ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~'
    }
}

// Apply static packaging options from gradle.properties
["pickFirsts", "excludes", "merges", "doNotStrip"].each { prop ->
    def options = (findProperty("android.packagingOptions.$prop") ?: "").split(",");
    for (i in 0..<options.size()) options[i] = options[i].trim();
    options -= ""
    if (options.length > 0) {
        println "android.packagingOptions.$prop += $options ($options.length)"
        options.each {
            android.packagingOptions[prop] += it
        }
    }
}

def rnVersion = null
def rnPackageFile = file("$rootDir/../node_modules/react-native/package.json")
if (rnPackageFile.exists()) {
    try {
        def json = new groovy.json.JsonSlurper().parseText(rnPackageFile.text)
        rnVersion = json.version
        println "Detected react-native version: ${rnVersion}"
    } catch (Exception e) {
        println "Failed to read react-native version from package.json: ${e.message}"
    }
} else {
    println "react-native package.json not found at $rnPackageFile. Run npm install if missing."
}

// fallback version if detection fails (pick a reasonably recent RN-compatible Fresco/Hermes mapping)
if (rnVersion == null || rnVersion.trim() == "") {
    rnVersion = "0.72.0" // conservative fallback — adjust if your project's RN version is different
    println "Using fallback react-native version: ${rnVersion}"
}

// --- dependencies (use resolved rnVersion) ---
dependencies {
    // Use react-android from local maven repo provided by node_modules/react-native/android
    implementation("com.facebook.react:react-android:${rnVersion}")

    def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true";
    def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true";
    def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true";

    try {
        if (this.hasProperty("expoLibs") && expoLibs?.versions?.fresco != null) {
            frescoVersion = expoLibs.versions.fresco.get()
        }
    } catch (Exception e) {
        // ignore — use fallback
    }

    if (isGifEnabled) {
        implementation("com.facebook.fresco:animated-gif:${frescoVersion}")
    }

    if (isWebpEnabled) {
        implementation("com.facebook.fresco:webpsupport:${frescoVersion}")
        if (isWebpAnimatedEnabled) {
            implementation("com.facebook.fresco:animated-webp:${frescoVersion}")
        }
    }

    def hermesEnabled = (findProperty('expo.jsEngine') ?: findProperty('hermesEnabled') ?: "false").toString()
    if (hermesEnabled.toLowerCase() in ["1", "true", "yes"]) {
        // Use hermes-android matching RN version (common mapping)
        implementation("com.facebook.react:hermes-android:${rnVersion}")
    } else {
        implementation jscFlavor
    }
}

// --- Legacy react.gradle integration (reliable fallback) ---
def reactGradle = file("$rootDir/../node_modules/react-native/react.gradle")
if (reactGradle.exists()) {
    apply from: reactGradle
} else {
    println "WARNING: react.gradle not found at $reactGradle. Ensure react-native is installed (npm install)."
}
